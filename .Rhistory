s = sample(250, 50)
t = sample(250, 50)
c_train <- c[s, ]
c_test <- c[t,]
View(c)
View(c)
s = sample(578, 500)
subset_sample = sample(189349, 500)
auto_data_subset = auto_data[subset_sample,]
s = sample(500, 450)
auto_data_train = auto_data_subset[s,]
auto_data_test = auto_data_subset[-s,]
tree_model <- rpart(brand~., auto_data_train, method = "class")
library(rpart.plot)
rpart.plot(tree_model)
p <- predict(tree_model, auto_data_test, type = "class")
s = sample(500, 450)
auto_data_train = auto_data_subset[s,]
auto_data_test = auto_data_subset[-s,]
tree_model <- rpart(brand~., auto_data_train, method = "class")
library(rpart.plot)
rpart.plot(tree_model)
p <- predict(tree_model, auto_data_test, type = "class")
colnames(ChickWeight)
weight <- ChickWeight
s = sample(578, 500)
weight_train <- weight[s,]
weight_test <- weight[-s,]
tree_model <- rpart(Chick~., weight_train, method = "class")
library(rpart.plot)
rpart.plot(tree_model
rpart.plot(tree_model)
library(rpart.plot)
rpart.plot(tree_model)
print("Hello")
print("Hello")
library(rpart.plot)
rpart.plot(tree_model)
p <- predict(tree_model, weight_test, type = "class")
table(weight$Chick, p)
table(weight_test$Chick, p)
View(iris_train)
View(weight)
View(weight)
table(HR_test$left, p)
this = FALSE
if (3 > 2) {
this = TRUE
}
print(this)
library(RCurl)
library(XML)
# assign input (could be a html file, a URL, html text, or some combination of all three is the form of a vector)
input <- "https://www.ics.uci.edu/ugrad/courses/listing.php?year=2016&level=Lower-Division&department=ALL&program=ALL"
# evaluate input and convert to text
txt <- htmlToText(input)
write(deparse(txt), "prof_data.txt")
#11 \n char represents new prof
txt_list <- strsplit(txt, "\n")
htmlToText <- function(input, ...) {
###---PACKAGES ---###
require(RCurl)
require(XML)
###--- LOCAL FUNCTIONS ---###
# Determine how to grab html for a single input element
evaluate_input <- function(input) {
# if input is a .html file
if(file.exists(input)) {
char.vec <- readLines(input, warn = FALSE)
return(paste(char.vec, collapse = ""))
}
# if input is html text
if(grepl("</html>", input, fixed = TRUE)) return(input)
# if input is a URL, probably should use a regex here instead?
if(!grepl(" ", input)) {
# downolad SSL certificate in case of https problem
if(!file.exists("cacert.perm")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.perm")
return(getURL(input, followlocation = TRUE, cainfo = "cacert.perm"))
}
# return NULL if none of the conditions above apply
return(NULL)
}
# convert HTML to plain text
convert_html_to_text <- function(html) {
doc <- htmlParse(html, asText = TRUE)
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
return(text)
}
# format text vector into one character string
collapse_text <- function(txt) {
return(paste(txt, collapse = " "))
}
###--- MAIN ---###
# STEP 1: Evaluate input
html.list <- lapply(input, evaluate_input)
# STEP 2: Extract text from HTML
text.list <- lapply(html.list, convert_html_to_text)
# STEP 3: Return text
text.vector <- sapply(text.list, collapse_text)
return(text.vector)
}
library(RCurl)
library(XML)
# assign input (could be a html file, a URL, html text, or some combination of all three is the form of a vector)
input <- "https://www.ics.uci.edu/ugrad/courses/listing.php?year=2016&level=Lower-Division&department=ALL&program=ALL"
# evaluate input and convert to text
txt <- htmlToText(input)
write(deparse(txt), "prof_data.txt")
#11 \n char represents new prof
txt_list <- strsplit(txt, "\n")
txt_list[250+(11*10)]
txt_list
txt_list[3]
txt_list[250
s
txt_list[250]
txt_list <- unlist(strsplit(txt, "\n"))
txt_list[250]
txt_list[250 + (11*10)]
txt_list[250 + (11*1)]
txt_list[250 + (11*2)]
txt_list[250 + (11*4)]
txt_list[250 + (11*6)]
txt_list
library(RCurl)
library(XML)
# assign input (could be a html file, a URL, html text, or some combination of all three is the form of a vector)
input <- "https://www.ics.uci.edu/ugrad/courses/listing.php?year=2016&level=Lower-Division&department=ALL&program=ALL"
# evaluate input and convert to text
txt <- htmlToText(input)
write(deparse(txt), "prof_data.txt")
#11 \n char represents new prof
txt_list <- unlist(strsplit(txt, "\n"))
find_spring_teachers <- function() {
s = 250
list_of_spring_teachers = list()
for i in 250:
}
htmlToText <- function(input, ...) {
###---PACKAGES ---###
require(RCurl)
require(XML)
###--- LOCAL FUNCTIONS ---###
# Determine how to grab html for a single input element
evaluate_input <- function(input) {
# if input is a .html file
if(file.exists(input)) {
char.vec <- readLines(input, warn = FALSE)
return(paste(char.vec, collapse = ""))
}
# if input is html text
if(grepl("</html>", input, fixed = TRUE)) return(input)
# if input is a URL, probably should use a regex here instead?
if(!grepl(" ", input)) {
# downolad SSL certificate in case of https problem
if(!file.exists("cacert.perm")) download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.perm")
return(getURL(input, followlocation = TRUE, cainfo = "cacert.perm"))
}
# return NULL if none of the conditions above apply
return(NULL)
}
# convert HTML to plain text
convert_html_to_text <- function(html) {
doc <- htmlParse(html, asText = TRUE)
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
return(text)
}
# format text vector into one character string
collapse_text <- function(txt) {
return(paste(txt, collapse = " "))
}
###--- MAIN ---###
# STEP 1: Evaluate input
html.list <- lapply(input, evaluate_input)
# STEP 2: Extract text from HTML
text.list <- lapply(html.list, convert_html_to_text)
# STEP 3: Return text
text.vector <- sapply(text.list, collapse_text)
return(text.vector)
}
input <- "https://www.ics.uci.edu/ugrad/courses/listing.php?year=2016&level=Lower-Division&department=ALL&program=ALL"
# evaluate input and convert to text
txt <- htmlToText(input)
write(deparse(txt), "prof_data.txt")
#11 \n char represents new prof
txt_list <- unlist(strsplit(txt, "\n"))
z <- 1:10:2
z
seq(1, 10, 2)
txt_list(232)
txt_list[232]
txt_list[250-22]
txt_list
?list
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for i in seq(238, 580, 11) {
list_of_spring_teachers <- c(list_of_spring_teachers, txt_list[i])
}
return(list_of_spring_teachers)
}
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(238, 580, 11)) {
list_of_spring_teachers <- c(list_of_spring_teachers, txt_list[i])
}
return(list_of_spring_teachers)
}
find_spring_teachers()
txt_list
txt_list[1:250]
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
list_of_spring_teachers <- c(list_of_spring_teachers, txt_list[i])
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- sub("^\([0-9]\)$", "", teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- sub("\([0-9]\)$", "", teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- sub("([0-9])$", "", teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- trimws(teacher, "b")
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- trimws(teacher, c("both", "left", "right"))
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- trimws(teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- trimws(teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher[1:length(teacher) - 4])
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- gsub("  ", "", teacher)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- trimws(teacher)
teacher <- substr(teacher, 1, length(teacher) - 4)
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
find_spring_teachers <- function() {
s =
list_of_spring_teachers = list()
for (i in seq(228, 580, 11)) {
teacher <- txt_list[i]
#teacher <- teacher..rstrip().rstrip("Â").rstrip().lstrip()
teacher <- gsub("Â", "", teacher)
teacher <- gsub( " *\\(.*?\\) *", "", teacher)
teacher <- gsub("TBD", "", teacher)
teacher <- trimws(teacher)
teacher <- substr(teacher, length(teacher) - 4, length(teacher))
list_of_spring_teachers <- c(list_of_spring_teachers, teacher)
}
return(list_of_spring_teachers)
}
find_spring_teachers()
#Change the working directory before running the code
setwd("C:\\Users\\shubh\\Documents\\GitHub\\Spam_detector")
spam_data <- read.csv("C:\\Users\\shubh\\Documents\\GitHub\\Spam_detector\\spam.csv", header = TRUE, check.names = TRUE)
library(rpart)
spam_data <- as.data.frame(spam_data)
print(is.data.frame(spam_data))
#list of words I consider spam
free_word = list("free", "free of cost", "free of charge", "bonus")
congratulations = list("congratulations", "congrats", "win", "winner", "won")
thanks = list("thanks", "thank", "thank you")
other_spam = list("urgent", "private", "pls", "sms", "txts", "critical", "crucial", "reply")
library(repr)
library(stringr)
i = 0
#create new columns and by default set all rows of the column equal to false
spam_data["free_word"] <- NA
spam_data$free_word <- FALSE
spam_data["congrats_word"] <- NA
spam_data$congrats_word <- FALSE
spam_data["thanks"] <- NA
spam_data$thanks <- FALSE
spam_data["other_spam_word"] <- NA
spam_data$other_spam_word <- FALSE
spamFilter <- function(text_data = spam_data) {
for (texts in text_data$v2) {
i = i + 1
list_of_words = unlist(strsplit(texts, " "))
list_of_words <- tolower(list_of_words)
for (j in 1:length(list_of_words)) { #iterates through each word
list_of_words[j] <- gsub("[[:punct:]]", "", list_of_words[j]) #gets rid of punctuation from words
#if the text contains any words from the list specified above then change the appropriate column to true
if(list_of_words[j] %in% free_word){
text_data[i, 6] <- TRUE
}
else if(list_of_words[j] %in% congratulations) {
text_data[i, 7] <- TRUE
}
else if(list_of_words[j] %in% thanks) {
text_data[i, 8] <- TRUE
}
else if(list_of_words[j] %in% other_spam) {
text_data[i, 9] <- TRUE
}
}
}
return(text_data)
}
spam_data = spamFilter()
s = sample(5572,5000)
spam_train <- spam_data[s, ]
spam_test <- spam_data[-s, ]
library(rpart)
tree <- rpart(v1 ~ free_word + congrats_word + thanks + other_spam_word, spam_train, method = "class")
rpart.plot(tree)
p <- predict(tree, spam_test, type = "class")
table(spam_test$v1, p)
#Change the working directory before running the code
setwd("C:\\Users\\shubh\\Documents\\GitHub\\Spam_detector")
spam_data <- read.csv("C:\\Users\\shubh\\Documents\\GitHub\\Spam_detector\\spam.csv", header = TRUE, check.names = TRUE)
library(rpart)
spam_data <- as.data.frame(spam_data)
print(is.data.frame(spam_data))
#list of words I consider spam
free_word = list("free", "free of cost", "free of charge", "bonus")
congratulations = list("congratulations", "congrats", "win", "winner", "won")
thanks = list("thanks", "thank", "thank you")
other_spam = list("urgent", "private", "pls", "sms", "txts", "critical", "crucial", "reply")
i = 0
#create new columns and by default set all rows of the column equal to false
spam_data["free_word"] <- NA
spam_data$free_word <- FALSE
spam_data["congrats_word"] <- NA
spam_data$congrats_word <- FALSE
spam_data["thanks"] <- NA
spam_data$thanks <- FALSE
spam_data["other_spam_word"] <- NA
spam_data$other_spam_word <- FALSE
spamFilter <- function(text_data = spam_data) {
for (texts in text_data$v2) {
i = i + 1
list_of_words = unlist(strsplit(texts, " "))
list_of_words <- tolower(list_of_words)
for (j in 1:length(list_of_words)) { #iterates through each word
list_of_words[j] <- gsub("[[:punct:]]", "", list_of_words[j]) #gets rid of punctuation from words
#if the text contains any words from the list specified above then change the appropriate column to true
if(list_of_words[j] %in% free_word){
text_data[i, 6] <- TRUE
}
else if(list_of_words[j] %in% congratulations) {
text_data[i, 7] <- TRUE
}
else if(list_of_words[j] %in% thanks) {
text_data[i, 8] <- TRUE
}
else if(list_of_words[j] %in% other_spam) {
text_data[i, 9] <- TRUE
}
}
}
return(text_data)
}
spam_data = spamFilter()
s = sample(5572,5000)
spam_train <- spam_data[s, ]
spam_test <- spam_data[-s, ]
library(rpart)
library(rpart.plot)
tree <- rpart(v1 ~ free_word + congrats_word + thanks + other_spam_word, spam_train, method = "class")
rpart.plot(tree)
p <- predict(tree, spam_test, type = "class")
table(spam_test$v1, p)
